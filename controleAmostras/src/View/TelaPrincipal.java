package View;

import Model.Amostra;
import Controller.ListaAmostras;
import Recursos.Configuracao;
import Recursos.Numero;
import java.awt.FileDialog;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jônatas Trabuco Belotti [jonatas.t.belotti@hotmail.com]
 */
public class TelaPrincipal extends javax.swing.JFrame {

  private static final int ESTADO_INCLUSAO = 0;
  private static final int ESTADO_EDICAO = 1;

  private DefaultTableModel modeloTabela;
  private FileDialog janelaAbrir;
  private FileDialog janelaSalvar;

  private ListaAmostras listaAmostras;
  private int estado;
  private int indiceAmostra;
  private String pastaArquivo = null;
  private String nomeArquivo = null;
  private boolean dadosNaoSalvos = false;

  /**
   * Creates new form TelaPrincipal
   */
  public TelaPrincipal() {
    initComponents();

    setLocationRelativeTo(null);
    atualizarTitulo();
    modeloTabela = (DefaultTableModel) jTbAmostras.getModel();
    setIconImage(new ImageIcon(getClass().getResource("/Recursos/icone.png")).getImage());
    jTbAmostras.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
      @Override
      public void valueChanged(ListSelectionEvent e) {
        if (e.getValueIsAdjusting()) {
          selecionarAmostra(e.getFirstIndex());
        }
      }
    });

    desabilitarTudo();
    listaAmostras = new ListaAmostras();
    carregarConfiguracao();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    jTbAmostras = new javax.swing.JTable();
    jLabel2 = new javax.swing.JLabel();
    jLbQuantidadeAmostras = new javax.swing.JLabel();
    jPnCampos = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    jTxtNome = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    jTxtEletrolito = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    jTxtConcentracaoEletrolito = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    jTxtAditivo = new javax.swing.JTextField();
    jLabel7 = new javax.swing.JLabel();
    jTxtConcentracaoAditivo = new javax.swing.JTextField();
    jLabel8 = new javax.swing.JLabel();
    jTxtEstequiometriaReacao = new javax.swing.JTextField();
    jLabel9 = new javax.swing.JLabel();
    jTxtTemperaturaQueima1 = new javax.swing.JTextField();
    jLabel10 = new javax.swing.JLabel();
    jTxtTemperaturaQueima2 = new javax.swing.JTextField();
    jLabel11 = new javax.swing.JLabel();
    jTxtMassaEletrolito = new javax.swing.JTextField();
    jTxtMassaAditivo = new javax.swing.JTextField();
    jLabel12 = new javax.swing.JLabel();
    jLabel13 = new javax.swing.JLabel();
    jTxtMassaPigmentoTeorica = new javax.swing.JTextField();
    jLabel14 = new javax.swing.JLabel();
    jTxtMassaPigmentoExperimental = new javax.swing.JTextField();
    jLbRendimento = new javax.swing.JLabel();
    jBtnNovo = new javax.swing.JButton();
    jBtnExcluir = new javax.swing.JButton();
    jBtnSalvar = new javax.swing.JButton();
    jBtnCancelar = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem3 = new javax.swing.JMenuItem();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenuItem2 = new javax.swing.JMenuItem();
    jMenuItem4 = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Controle de amostras");
    setBackground(new java.awt.Color(255, 255, 255));
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    jTbAmostras.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Amostra", "Eletrólito "
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jTbAmostras.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTbAmostrasMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(jTbAmostras);

    jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel2.setText("Amostras:");

    jLbQuantidadeAmostras.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLbQuantidadeAmostras.setText("0 amostras");

    jPnCampos.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jLabel3.setText("Nome:");

    jTxtNome.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        jTxtNomeKeyReleased(evt);
      }
    });

    jLabel4.setText("Eletrólito:");

    jLabel5.setText("Concentração (%):");

    jLabel6.setText("Aditivo:");

    jLabel7.setText("Concentração (%):");

    jLabel8.setText("Estequiometria da Reação:");

    jLabel9.setText("Temperatura da 1ª Queima:");

    jLabel10.setText("Temperatura da 2ª Queima:");

    jLabel11.setText("Massa de Eletrólito (g):");

    jLabel12.setText("Massa de Aditivo (g):");

    jLabel13.setText("Massa de Pigmento Teórica (g):");

    jTxtMassaPigmentoTeorica.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        jTxtMassaPigmentoTeoricaFocusLost(evt);
      }
    });
    jTxtMassaPigmentoTeorica.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        jTxtMassaPigmentoTeoricaKeyReleased(evt);
      }
    });

    jLabel14.setText("Massa de Pigmento Experimental (g):");

    jTxtMassaPigmentoExperimental.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        jTxtMassaPigmentoExperimentalFocusLost(evt);
      }
    });
    jTxtMassaPigmentoExperimental.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        jTxtMassaPigmentoExperimentalKeyReleased(evt);
      }
    });

    jLbRendimento.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
    jLbRendimento.setText("Rendimento: 0,0%");

    javax.swing.GroupLayout jPnCamposLayout = new javax.swing.GroupLayout(jPnCampos);
    jPnCampos.setLayout(jPnCamposLayout);
    jPnCamposLayout.setHorizontalGroup(
      jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPnCamposLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addComponent(jLbRendimento)
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPnCamposLayout.createSequentialGroup()
                .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel3)
                  .addComponent(jTxtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnCamposLayout.createSequentialGroup()
                .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jTxtAditivo, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(jTxtEletrolito)
                  .addGroup(jPnCamposLayout.createSequentialGroup()
                    .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addComponent(jLabel4)
                      .addComponent(jLabel6))
                    .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel7)
                  .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jTxtConcentracaoEletrolito, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(jTxtConcentracaoAditivo))))
              .addGroup(jPnCamposLayout.createSequentialGroup()
                .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtEstequiometriaReacao))
                  .addComponent(jLabel9)
                  .addComponent(jTxtTemperaturaQueima1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel11)
                  .addComponent(jTxtMassaEletrolito, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel13)
                  .addComponent(jTxtMassaPigmentoTeorica, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jTxtTemperaturaQueima2)
                  .addComponent(jTxtMassaAditivo)
                  .addGroup(jPnCamposLayout.createSequentialGroup()
                    .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addComponent(jLabel10)
                      .addComponent(jLabel12)
                      .addComponent(jLabel14))
                    .addGap(0, 0, Short.MAX_VALUE))
                  .addComponent(jTxtMassaPigmentoExperimental))))
            .addContainerGap())))
    );
    jPnCamposLayout.setVerticalGroup(
      jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPnCamposLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jTxtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jTxtEletrolito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jTxtConcentracaoEletrolito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(jLabel7))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jTxtAditivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jTxtConcentracaoAditivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jLabel8)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jTxtEstequiometriaReacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTxtTemperaturaQueima1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTxtTemperaturaQueima2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addComponent(jLabel11)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTxtMassaEletrolito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addComponent(jLabel12)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTxtMassaAditivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addComponent(jLabel13)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTxtMassaPigmentoTeorica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPnCamposLayout.createSequentialGroup()
            .addComponent(jLabel14)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTxtMassaPigmentoExperimental, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jLbRendimento)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jBtnNovo.setText("Nova");
    jBtnNovo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jBtnNovoActionPerformed(evt);
      }
    });

    jBtnExcluir.setText("Excluir");
    jBtnExcluir.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jBtnExcluirActionPerformed(evt);
      }
    });

    jBtnSalvar.setText("Salvar amostra");
    jBtnSalvar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jBtnSalvarActionPerformed(evt);
      }
    });

    jBtnCancelar.setText("Cancelar");
    jBtnCancelar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jBtnCancelarActionPerformed(evt);
      }
    });

    jMenu1.setText("Arquivo");

    jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    jMenuItem3.setText("Novo");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem3ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem3);

    jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
    jMenuItem1.setText("Abrir");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem1ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem1);

    jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuItem2.setText("Salvar");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem2ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem2);

    jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    jMenuItem4.setText("Salvar como");
    jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem4ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem4);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(jLbQuantidadeAmostras, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jPnCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addGroup(layout.createSequentialGroup()
                .addComponent(jBtnNovo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnExcluir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnSalvar)))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLbQuantidadeAmostras)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jBtnNovo)
              .addComponent(jBtnExcluir)
              .addComponent(jBtnSalvar)
              .addComponent(jBtnCancelar))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPnCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addComponent(jScrollPane1))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    // TODO add your handling code here:
    abrirArquivo();
  }//GEN-LAST:event_jMenuItem1ActionPerformed

  private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    // TODO add your handling code here:
    salvarArquivo();
  }//GEN-LAST:event_jMenuItem2ActionPerformed

  private void jBtnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNovoActionPerformed
    // TODO add your handling code here:
    novaAmostra();
  }//GEN-LAST:event_jBtnNovoActionPerformed

  private void jBtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarActionPerformed
    // TODO add your handling code here:
    cancelar();
  }//GEN-LAST:event_jBtnCancelarActionPerformed

  private void jTxtNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtNomeKeyReleased
    // TODO add your handling code here:
    verificarTeclaAcao(evt);
  }//GEN-LAST:event_jTxtNomeKeyReleased

  private void jBtnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalvarActionPerformed
    // TODO add your handling code here:
    salvarAmostra();
  }//GEN-LAST:event_jBtnSalvarActionPerformed

  private void jTbAmostrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTbAmostrasMouseClicked
    // TODO add your handling code here:
  }//GEN-LAST:event_jTbAmostrasMouseClicked

  private void jTxtMassaPigmentoTeoricaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtMassaPigmentoTeoricaFocusLost
    // TODO add your handling code here:
    calcularRendimento();
  }//GEN-LAST:event_jTxtMassaPigmentoTeoricaFocusLost

  private void jTxtMassaPigmentoExperimentalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtMassaPigmentoExperimentalFocusLost
    // TODO add your handling code here:
    calcularRendimento();
  }//GEN-LAST:event_jTxtMassaPigmentoExperimentalFocusLost

  private void jTxtMassaPigmentoTeoricaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMassaPigmentoTeoricaKeyReleased
    // TODO add your handling code here:
    calcularRendimento();
  }//GEN-LAST:event_jTxtMassaPigmentoTeoricaKeyReleased

  private void jTxtMassaPigmentoExperimentalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMassaPigmentoExperimentalKeyReleased
    // TODO add your handling code here:
    calcularRendimento();
  }//GEN-LAST:event_jTxtMassaPigmentoExperimentalKeyReleased

  private void jBtnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExcluirActionPerformed
    // TODO add your handling code here:
    excluirAmostra();
  }//GEN-LAST:event_jBtnExcluirActionPerformed

  private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
    // TODO add your handling code here:
    novoArquivo();
  }//GEN-LAST:event_jMenuItem3ActionPerformed

  private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
    // TODO add your handling code here:
    salvarComo();
  }//GEN-LAST:event_jMenuItem4ActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    // TODO add your handling code here:
    fecharJanela();
  }//GEN-LAST:event_formWindowClosing

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new TelaPrincipal().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jBtnCancelar;
  private javax.swing.JButton jBtnExcluir;
  private javax.swing.JButton jBtnNovo;
  private javax.swing.JButton jBtnSalvar;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JLabel jLbQuantidadeAmostras;
  private javax.swing.JLabel jLbRendimento;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JPanel jPnCampos;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTable jTbAmostras;
  private javax.swing.JTextField jTxtAditivo;
  private javax.swing.JTextField jTxtConcentracaoAditivo;
  private javax.swing.JTextField jTxtConcentracaoEletrolito;
  private javax.swing.JTextField jTxtEletrolito;
  private javax.swing.JTextField jTxtEstequiometriaReacao;
  private javax.swing.JTextField jTxtMassaAditivo;
  private javax.swing.JTextField jTxtMassaEletrolito;
  private javax.swing.JTextField jTxtMassaPigmentoExperimental;
  private javax.swing.JTextField jTxtMassaPigmentoTeorica;
  private javax.swing.JTextField jTxtNome;
  private javax.swing.JTextField jTxtTemperaturaQueima1;
  private javax.swing.JTextField jTxtTemperaturaQueima2;
  // End of variables declaration//GEN-END:variables

  private void fecharJanela() {
    if (verificarDadosNaoSalvos()) {
      System.exit(0);
    }
  }

  private void carregarConfiguracao() {
    Configuracao.carregarConfiguracao();

    if (Configuracao.getPastaUltimoArquivo() != null && Configuracao.getNomeUltimoArquivo() != null) {
      abrirArquivo(Configuracao.getPastaUltimoArquivo(), Configuracao.getNomeUltimoArquivo());
    }
  }

  private void atualizarConfiguracao() {
    Configuracao.salvarConfiguracao(this.pastaArquivo, this.nomeArquivo);
  }

  private void novoArquivo() {
    if (verificarDadosNaoSalvos()) {
      this.pastaArquivo = null;
      this.nomeArquivo = null;

      listaAmostras.novaLista();

      atualizarTitulo();
      desabilitarTudo();
      atualizaTabela();
    }
  }

  private void abrirArquivo() {
    abrirArquivo(null, null);
  }

  private void abrirArquivo(String pasta, String nome) {
    if (pasta == null || nome == null) {
      if (this.janelaAbrir == null) {
        this.janelaAbrir = new FileDialog((java.awt.Frame) null, "Selecionar arquivo", FileDialog.LOAD);
      }

      this.janelaAbrir.setMultipleMode(false);
      this.janelaAbrir.setVisible(true);

      pasta = janelaAbrir.getDirectory();
      nome = janelaAbrir.getFile();
    }

    if (pasta != null && nome != null) {
      if (!nome.endsWith(".txt")) {
        JOptionPane.showMessageDialog(null, "Extensão não suportada. Por favor selecione um arquivo no formato .txt.", "Erro ao abrir", JOptionPane.ERROR_MESSAGE);
        return;
      }

      if (listaAmostras.carregarArquivo(pasta, nome)) {
        this.pastaArquivo = pasta;
        this.nomeArquivo = nome;

        atualizarTitulo();
        desabilitarTudo();
        atualizaTabela();
        atualizarConfiguracao();
      } else {
        JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo. Verifique se este é o arquivo correto e se ele não está corrompido.", "Erro ao abrir", JOptionPane.ERROR_MESSAGE);
      }
    }
  }

  private void salvarArquivo() {
    String nome;
    String pasta;

    if (this.pastaArquivo == null || this.nomeArquivo == null) {
      if (this.janelaSalvar == null) {
        this.janelaSalvar = new FileDialog(this, "Salvar arquivo", FileDialog.SAVE);
      }

      this.janelaSalvar.setVisible(true);

      pasta = this.janelaSalvar.getDirectory();
      nome = this.janelaSalvar.getFile();

      if (pasta != null && nome != null) {
        if (!nome.endsWith(".txt")) {
          nome += ".txt";
        }

        this.pastaArquivo = pasta;
        this.nomeArquivo = nome;
      }
    }

    if (this.pastaArquivo != null & this.nomeArquivo != null) {
      if (listaAmostras.salvarArquivo(this.pastaArquivo, this.nomeArquivo)) {
        JOptionPane.showMessageDialog(null, "Arquivo salvo com sucesso!", "Arquivo salvo", JOptionPane.INFORMATION_MESSAGE);
        atualizarTitulo();
        dadosNaoSalvos = false;
        atualizarConfiguracao();
      } else {
        JOptionPane.showMessageDialog(null, "Erro ao salvar arquivo! Por favor tente novamente.", "Erro ao salvar", JOptionPane.ERROR_MESSAGE);
      }
    }
  }

  private void salvarComo() {
    this.pastaArquivo = null;
    this.nomeArquivo = null;

    salvarArquivo();
  }

  private void novaAmostra() {
    estado = ESTADO_INCLUSAO;
    indiceAmostra = -1;
    jTbAmostras.getSelectionModel().clearSelection();

    setEnabledCampos(true);
    jBtnSalvar.setEnabled(true);
    jBtnCancelar.setEnabled(true);
    jBtnExcluir.setEnabled(false);
    jBtnNovo.setEnabled(false);

    limparCampos();
    jTxtNome.requestFocus();
  }

  private void cancelar() {
    int resposta = JOptionPane.showConfirmDialog(null, "Você irá perder os dados não salvos. Tem ceteza?", "Cancelar", JOptionPane.YES_NO_OPTION);

    if (resposta == JOptionPane.YES_OPTION) {//Usuário clicou em Sim.
      desabilitarTudo();
    } else if (resposta == JOptionPane.NO_OPTION) {
      //Usuário clicou em não.
    }
  }

  private void salvarAmostra() {
    Amostra amostra;

    if (verificarDados()) {
      amostra = new Amostra();

      amostra.setNome(jTxtNome.getText());
      amostra.setEletrolito(jTxtEletrolito.getText());
      amostra.setConcentracaoEletrolito(jTxtConcentracaoEletrolito.getText());
      amostra.setAditivo(jTxtAditivo.getText());
      amostra.setConcentracaoAditivo(jTxtConcentracaoAditivo.getText());
      amostra.setEstequiometriaReacao(jTxtEstequiometriaReacao.getText());
      amostra.setTemperaturaQueima1(jTxtTemperaturaQueima1.getText());
      amostra.setTemperaturaQueima2(jTxtTemperaturaQueima2.getText());
      amostra.setMassaEletrolito(jTxtMassaEletrolito.getText());
      amostra.setMassaAditivo(jTxtMassaAditivo.getText());
      amostra.setMassaPigmentoTeorica(jTxtMassaPigmentoTeorica.getText());
      amostra.setMassaPigmentoExperimental(jTxtMassaPigmentoExperimental.getText());

      listaAmostras.salvarAmostra(amostra, indiceAmostra);

      jTbAmostras.getSelectionModel().clearSelection();
      desabilitarTudo();
      atualizaTabela();
      dadosNaoSalvos = true;
    }
  }

  private void excluirAmostra() {
    if (estado == ESTADO_EDICAO) {
      int resposta;

      resposta = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir a amostra " + jTxtNome.getText() + "?", "Excluir amostra", JOptionPane.YES_NO_OPTION);

      if (resposta == JOptionPane.YES_OPTION) {//Usuário clicou em Sim.
        listaAmostras.excluirAmostra(indiceAmostra);

        desabilitarTudo();
        atualizaTabela();
        dadosNaoSalvos = true;
      } else if (resposta == JOptionPane.NO_OPTION) {
        //Usuário clicou em não.
      }
    }
  }

  private void atualizaTabela() {
    while (this.modeloTabela.getRowCount() > 0) {
      this.modeloTabela.removeRow(0);
    }

    for (Amostra amostra : listaAmostras.getAmostras()) {
      this.modeloTabela.addRow(new Object[]{amostra.getNome(), amostra.getEletrolito(), ""});
    }

    jLbQuantidadeAmostras.setText(listaAmostras.getAmostras().size() + " amostras");

    if (listaAmostras.getAmostras().size() > 0) {
      jTbAmostras.setEnabled(true);
    }
  }

  private void selecionarAmostra(int indice) {
    Amostra amostra;

    estado = ESTADO_EDICAO;
    indiceAmostra = indice;
    amostra = listaAmostras.getAmostras().get(indice);

    jTxtNome.setText(amostra.getNome());
    jTxtEletrolito.setText(amostra.getEletrolito());
    jTxtConcentracaoEletrolito.setText(amostra.getConcentracaoEletrolitoString());
    jTxtAditivo.setText(amostra.getAditivo());
    jTxtConcentracaoAditivo.setText(amostra.getConcentracaoAditivoString());
    jTxtEstequiometriaReacao.setText(amostra.getEstequiometriaReacao());
    jTxtTemperaturaQueima1.setText(amostra.getTemperaturaQueima1());
    jTxtTemperaturaQueima2.setText(amostra.getTemperaturaQueima2());
    jTxtMassaEletrolito.setText(amostra.getMassaEletrolitoString());
    jTxtMassaAditivo.setText(amostra.getMassaAditivoString());
    jTxtMassaPigmentoTeorica.setText(amostra.getMassaPigmentoTeoricaString());
    jTxtMassaPigmentoExperimental.setText(amostra.getMassaPigmentoExperimentalString());
    jLbRendimento.setText("Rendimento: " + amostra.getRendimento() + "%");

    setEnabledCampos(true);
    jBtnNovo.setEnabled(true);
    jBtnExcluir.setEnabled(true);
    jBtnCancelar.setEnabled(true);
    jBtnSalvar.setEnabled(true);
  }

  private void verificarTeclaAcao(java.awt.event.KeyEvent evt) {
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
      cancelar();
    }

    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      salvarAmostra();
    }
  }

  private void desabilitarTudo() {
    limparCampos();

    jBtnNovo.setEnabled(true);
    jBtnExcluir.setEnabled(false);
    jBtnCancelar.setEnabled(false);
    jBtnSalvar.setEnabled(false);
    setEnabledCampos(false);
  }

  private void setEnabledCampos(boolean val) {
    jTxtNome.setEnabled(val);
    jTxtEletrolito.setEnabled(val);
    jTxtConcentracaoEletrolito.setEnabled(val);
    jTxtAditivo.setEnabled(val);
    jTxtConcentracaoAditivo.setEnabled(val);
    jTxtEstequiometriaReacao.setEnabled(val);
    jTxtTemperaturaQueima1.setEnabled(val);
    jTxtTemperaturaQueima2.setEnabled(val);
    jTxtMassaEletrolito.setEnabled(val);
    jTxtMassaAditivo.setEnabled(val);
    jTxtMassaPigmentoTeorica.setEnabled(val);
    jTxtMassaPigmentoExperimental.setEnabled(val);
  }

  private void limparCampos() {
    jTxtNome.setText("");
    jTxtEletrolito.setText("");
    jTxtConcentracaoEletrolito.setText("");
    jTxtAditivo.setText("");
    jTxtConcentracaoAditivo.setText("");
    jTxtEstequiometriaReacao.setText("");
    jTxtTemperaturaQueima1.setText("");
    jTxtTemperaturaQueima2.setText("");
    jTxtMassaEletrolito.setText("");
    jTxtMassaAditivo.setText("");
    jTxtMassaPigmentoTeorica.setText("");
    jTxtMassaPigmentoExperimental.setText("");
    jLbRendimento.setText("Rendimento: 0,0%");
  }

  private boolean verificarDados() {
    if (!verificarNome()) {
      return false;
    }

    if (!verificarConcentracao()) {
      return false;
    }

    if (!verificarSomaMassas()) {
      return false;
    }

    return true;
  }

  private boolean verificarNome() {
    boolean resposta;
    int indice;
    String mensagem;
    String titulo;

    resposta = true;
    indice = listaAmostras.getIndiceAmostra(jTxtNome.getText());
    titulo = "Nome duplicado";
    mensagem = "Atenção! Já existe uma amostra com esse nome.";

    if (jTxtNome.getText().equals("")) {
      resposta = false;
      titulo = "Amostra sem nome";
      mensagem = "Atenção! É obrigatório informar um nome para identificar a amostra.";
    }

    if (estado == ESTADO_INCLUSAO && indice >= 0) {
      resposta = false;
    }

    if (estado == ESTADO_EDICAO && indice >= 0 && indice != indiceAmostra) {
      resposta = false;
    }

    if (!resposta) {
      JOptionPane.showMessageDialog(null, mensagem, titulo, JOptionPane.WARNING_MESSAGE);

      jTxtNome.requestFocus();
    }

    return resposta;
  }

  private boolean verificarConcentracao() {
    boolean resposta;

    resposta = Numero.getDouble(jTxtConcentracaoAditivo.getText()) + Numero.getDouble(jTxtConcentracaoEletrolito.getText()) == 100.0;

    if (!resposta) {
      JOptionPane.showMessageDialog(null, "Atenção! A soma da Concentração de Eletrólito e da Concentração de Aditivo deve ser igual a 100%.", "Valores não conferem", JOptionPane.WARNING_MESSAGE);
      jTxtConcentracaoEletrolito.requestFocus();
    }

    return resposta;
  }

  private boolean verificarSomaMassas() {
    boolean resposta;

    resposta = (Numero.getDouble(jTxtMassaEletrolito.getText()) + Numero.getDouble(jTxtMassaAditivo.getText()) == Numero.getDouble(jTxtMassaPigmentoTeorica.getText()));

    if (!resposta) {
      JOptionPane.showMessageDialog(null, "Atenção! A soma da Massa de Eletrólito com a Massa de Aditivo deve ser igual a Massa de Pigmento Teórica.", "Valores não conferem", JOptionPane.WARNING_MESSAGE);
      jTxtMassaPigmentoTeorica.requestFocus();
    }

    return resposta;
  }

  private boolean verificarDadosNaoSalvos() {
    if (dadosNaoSalvos) {
      int resposta;

      resposta = JOptionPane.showConfirmDialog(null, "Você tem certeza? Existem dados não salvos, você irá perder todos eles.", "Tem certeza?", JOptionPane.YES_NO_OPTION);

      if (resposta == JOptionPane.NO_OPTION) {
        return false;
      }
    }
    return true;
  }

  private void calcularRendimento() {
    Amostra amostra;

    amostra = new Amostra();
    amostra.setMassaPigmentoTeorica(jTxtMassaPigmentoTeorica.getText());
    amostra.setMassaPigmentoExperimental(jTxtMassaPigmentoExperimental.getText());

    jLbRendimento.setText("Rendimento: " + amostra.getRendimento() + "%");
  }

  private void atualizarTitulo() {
    String titulo;

    titulo = "Controle de Amostras";

    if (this.pastaArquivo != null && this.nomeArquivo != null) {
      titulo += " - " + this.pastaArquivo + this.nomeArquivo;
    }

    setTitle(titulo);
  }
}
